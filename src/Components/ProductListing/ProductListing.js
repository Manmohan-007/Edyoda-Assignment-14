import React from "react";import classes from './ProductListing.module.css'import ProductDetails from "../ProductDetails/ProductDetails";import { connect } from 'react-redux'import ButtonGenerator from "../ButtonGenerator/ButtonGenerator";const ProductListing = (props) => {    const multiDelete = () => {        let ids = props.selected        let data = props.data        let tempArray = []        data.productsPage.products.map((item, index) => {            if(ids.includes(index)) {                return null            } else tempArray.push(item)        })        data.productsPage['products'] = tempArray        props.selectProducts([])        props.deleteProducts(data)    }    return(        <div className={classes.MainContainer}>            <div className={classes.TableContainer}>                <table className={classes.Table}>                    <tr className={classes.TableHeaderRow}>                        <th className={classes.TableHeadings}></th>                        <th className={classes.TableHeadings}>Product Name</th>                        <th className={classes.TableHeadings}>Unit Sold</th>                        <th className={classes.TableHeadings}>In Stock</th>                        <th className={classes.TableHeadings}>Expire Date</th>                        <th className={classes.TableHeadings}></th>                    </tr>                    {                        props.data.productsPage.products.map((item , index) => {                        return <ProductDetails key={index} productId={index} {...item} {...props}/>                    })                    }                </table>            </div>            <div className={classes.ButtonContainer}>                <ButtonGenerator {...props} BtnTitle={'Add New Product'} />                <ButtonGenerator multiDelete={multiDelete} {...props} BtnTitle={'Delete Selected Products'} />            </div>        </div>    )}let DataFromGlobalStore = (globalStore) => {    return globalStore.allData}let updateGlobalStoreData = (dispatch) => {    return {        deleteProducts: (updatedData) => dispatch({type: 'DELETE_PRODUCT', data: updatedData}),        selectProducts: (updateSelection) => dispatch({type : 'SELECTION', data: updateSelection}),    }}export default connect(DataFromGlobalStore, updateGlobalStoreData)(ProductListing)