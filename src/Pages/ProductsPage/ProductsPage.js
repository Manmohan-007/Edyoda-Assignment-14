import React from "react";import { connect } from 'react-redux'import classes from './ProductsPage.module.css'import { Exit } from "../../Assets/Icons";import ProductListing from "../../Components/ProductListing/ProductListing";import Categories from "../../Components/Categories/Categories";import ButtonGenerator from "../../Components/ButtonGenerator/ButtonGenerator";class ProductsPage extends React.Component{    state = {        newCategory: false,        categoryName: ''    }    viewNewCategory = () => {        this.setState({newCategory: !this.state.newCategory})    }    newCategoryValue = (value) => {        this.setState({categoryName: value})    }    uploadCategory = () => {        let cat = this.props.data        let isValid = false        if(this.state.categoryName == '' || this.state.categoryName == undefined) {            alert('Please enter a Category Name')        } else isValid = true        if(isValid) {            cat.productsPage.categories.push(this.state.categoryName)            this.viewNewCategory()            this.props.updateCategories(cat)        }    }    render() {        return(            <div className={classes.MainContainer}>                <div className={classes.ProductDetailsSection}>                    <ProductListing {...this.state} {...this.props}/>                </div>                <div className={classes.ProductCategoriesSection}>                    <h4 className={classes.CategoryTitle}>Product Categories</h4>                    <div className={classes.CategoriesContainer}>                        {this.props.data.productsPage.categories.map((item, index) => <Categories key={index} itemId={index} CategoryName={item}/>)}                    </div>                    <div onClick={() => this.viewNewCategory()} className={classes.AddNewCategoryButtonContainer}>                        <ButtonGenerator BtnTitle={'Add New Category'}/>                    </div>                </div>                <div className={`${this.state.newCategory ? classes.NewCategoryContainer : classes.Hidden}`}>                    <div onClick={() => this.viewNewCategory()} className={classes.ExitIcon}>{Exit}</div>                    <label className={classes.NewCategoryLabel}>New Category</label>                    <input onChange={(e) => this.newCategoryValue(e.target.value)} id={'categoryField'} className={classes.NewCategoryInputField} type={'text'} placeholder={`${this.state.categoryName == '' ? 'New Category Name' :this.state.categoryName }`}/>                    <div className={classes.AddCategoryButtonContainer}>                        <ButtonGenerator handle={this.uploadCategory} BtnTitle={'Add Category'}/>                    </div>                </div>                <div className={`${this.state.newCategory ? classes.Overlay : classes.Hidden}`}></div>            </div>        )    }}let updateGlobalStoreData = (dispatch) => {    return {        updateCategories: (data) => dispatch({type: 'ADD_CATEGORY', data: data}),    }}let getStoreData = (globalStore) => {    return globalStore.allData}export default connect(getStoreData, updateGlobalStoreData)(ProductsPage)